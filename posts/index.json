[{"content":"当サイトではVuePressのサブディレクトリ以下をブログとして扱っている。少し前まではブログ構築に@vuepress/plugin-blogを使っていたが、もっと簡単な機能でいいことと、VuePressの勉強もしたいと思っていたので自分で作ってみた。\nVuePress公式サイトのPluginを参考にした。\n作りたいもの ブログといっても、以下のように必要な機能は少ない。\n ページのURLに日付を入れる サイドバーに年ごとにグルーピングした記事一覧を表示  VuePress内の全ての記事をブログ化するのではなく、特定のディレクトリ内だけに適用させたい。\nPluginの基本 .vuepress内にscript/MyBlogPlugin.jsを作る。\n1 2 3 4 5 6 7  module.exports = (options, ctx) =\u0026gt; { return { name: \u0026#39;myblog-plugin\u0026#39;, //プラグインの名前  //TODO: ここにいろいろAPIを追加していく  } }   プラグインを読み込ませるためにconfig.jsのpluginsに読み込み処理を追加\n1 2 3 4 5  module.exports = { plugins: [ require(\u0026#39;./script/MyBlogPlugin.js\u0026#39;), //この行を追加。作成するプラグインを読み込む  ] }   ページのURLに日付を入れる ページのURLを変えるには、通常はマークダウンのfrontmatterにpermalinkを指定する。これをプラグインでできればうまくいくはず。つまり、プラグイン側で各ページのfrontmatterにアクセスする方法が分かればよい。\nページのデータを拡張するにはextendPageDataを使用する。\nこの関数をMyBlogPluginに追加する。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  module.exports = (options, ctx) =\u0026gt; { const blogHome = \u0026#39;/_blog/\u0026#39; return { name: \u0026#39;myblog-plugin\u0026#39;, //プラグインの名前  //ページオブジェクト拡張用API  extendPageData ($page) { //_blogディレクトリ以下をブログとする  if($page.regularPath.startsWith(blogHome)){ if($page.regularPath === \u0026#39;blogHome\u0026#39;){ //ブログトップページのURLには日付は入れない  $page.frontmatter.permalink = \u0026#39;/blog/\u0026#39; }else{ //各記事のURLは/blog/2019/07/14/xxxxのようになる  $page.frontmatter.permalink = \u0026#39;/blog/:year/:month/:day/:slug\u0026#39; } } }, } }   extendPageDataは全ての記事分呼ばれるのでブログ化処理は特定のディレクトリ内の記事のみに適用させている。$pageオブジェクトを使って各ページのデータを変更することができる。今回の場合は、frontmatterのpermalinkを変更している。\nサイドバーに年ごとにグルーピングした記事一覧を表示 サイドバーは通常はconfig.jsのthemeConfigから設定できる。そこにスクリプトを書いてもいいのだが、ブログ関連の処理がちらばるのが嫌なのでプラグイン内でサイドバーをいじりたい。extendPageDataは各ページ毎に呼ばれるので、その後に一度呼ばれるようなAPIがほしい。そこでreadyを使う\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  module.exports = (options, ctx) =\u0026gt; { const blogHome = \u0026#39;/_blog/\u0026#39; const sidebarPages = [] //サイドバーに表示するページ  return { name: \u0026#39;myblog-plugin\u0026#39;, //プラグインの名前  //ページオブジェクト拡張用API  extendPageData ($page) { if($page.regularPath.startsWith(blogHome)){ if($page.regularPath === \u0026#39;blogHome\u0026#39;){ $page.frontmatter.permalink = \u0026#39;/blog/\u0026#39; }else{ $page.frontmatter.permalink = \u0026#39;/blog/:year/:month/:day/:slug\u0026#39; } //サイドバーをありに設定  $page.frontmatter.sidebar = true //ブログ対象記事のpageオブジェクトを持っておく  sidebarPages.push($page) } }, //初期化後に呼ばれる。（extendPageDataより後に呼ばれる。)  async ready() { const sidebar = [] //ホーム以外の記事を日付の降順に取得し、サイドバーに年毎にグループ分けして表示  sidebarPages .filter($page =\u0026gt; $page.regularPath !== blogHome) .sort(($pageA, $pageB) =\u0026gt; $pageB.frontmatter.date - $pageA.frontmatter.date) .forEach($page =\u0026gt; { const yyyy = $page.frontmatter.date.getFullYear() let group = sidebar.find(v =\u0026gt; v.title === `${yyyy}年`); if(!group){ group = { title: `${yyyy}年`, collapsable: true, sidebarDepth: 0, children: [], } sidebar.push(group) } group.children.push($page.regularPath) }) //ctx.siteConfigでconfig.jsの設定へアクセスできる  ctx.siteConfig.themeConfig.sidebar[blogHome] = sidebar }, } }   ready内では、config.jsのthemeConfig.sidebarに以下のような設定を作るのと同じことをやっている。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  sidebar: { \u0026#39;/_blog/\u0026#39;: [ { title: \u0026#39;2019年\u0026#39;, collapsable: true, //開閉可能  sidebarDepth: 0, //通常は各ページ内のヘッダー要素へのリンクも作られるが、不要なので消す  children: [ \u0026#39;2019年の記事1のパス\u0026#39;, \u0026#39;2019年の記事2のパス\u0026#39;, ] }, { title: \u0026#39;2018年\u0026#39;, collapsable: true, sidebarDepth: 0, children: [ \u0026#39;2018年の記事1のパス\u0026#39;, \u0026#39;2018年の記事2のパス\u0026#39;, ] }, //以下省略  ] }   これでこのページのようなブログっぽいものが出来上がり。プラグインを作ればいろいろできそうなのでもっと試したい。\n","description":"","id":1,"section":"posts","tags":null,"title":"VuePressでプラグインを作ってみた","uri":"https://catalion.com/posts/vuepress-plugin/"},{"content":"ごった煮メモ ブログのネタを考えようとしていたが、考えれば考える程書く気がなくなっていく。テーマがあると書けなくなるのかも。そこで、テーマを絞らない記事があってもいいのでは？と考え、こんなまとまりもない思考の断片的なものを書く。\n少しづつ 最近はアナログノート + バレットジャーナルでタスク管理を行っている。悪くないが、完璧ではない。時々、うまく行かないこともある。そんなときは、なぜうまく行かないのか考える。原因がすぐ分かれば良いが、そんな簡単な問題ではない。そこで、「原因はこれかもしれない」と仮定してみる。そして、それを少し違うものに変えてみる。変えすぎると明日の自分が急激な変化に対応できなくなるから、少しだけ変える。明日、この少しの変化により何かが起こるかもしれない。良い方向へ行くかもしれないし、悪化するかもしれない。何も変わらないかも。こんなことを毎日続けて少しづつ改良する。完璧なんてものは無理だけど。\nばらんす プログラムを作るとき、ソースを書き始める前にどのようなコードを書くか頭の中でシミュレーションするようにしている。予め全体像の把握をするということに近いのかも。以前は書きながらやっていたが、どうも効率がよくない気がした。視野が狭すぎたのかもしれない。視野をずっと広げっぱなしなのも良くない気がする。瞬時に視野を切り替える能力が必要なのかも。\n昨日の自分のメモ 昨日の夜考えていたことが、今日になるとまったく納得できないものだった。昨日の自分と今日の自分は別人だ。だからこそ、思いついたことは記録しておく。過去のメモを読むことで、他者の考えに触れることができる。\n","description":"","id":2,"section":"posts","tags":null,"title":"思考スケッチ1","uri":"https://catalion.com/posts/shikou-sketch1/"},{"content":"倉下忠憲さんの「やること地獄」を終わらせるタスク管理「超」入門を読んで、止まっていたタスク管理が再始動した。\n私がタスク管理というものを意識し始めたのは10年ぐらい前だ。あまり覚えていないが、最初に使っていたのはGTDだったはず。Inboxや、各種リストをつくり、「タスクを管理している感」を味わっていたに違いない。だが、その時から最近まで多くのタスク管理手法やツールを乗り換えてきた。何度も「うまくいかない」と感じてきたのだ。\n結局、他人のシステムをそのまま自分に当てはめてもうまくいかないということに気がついた。それどころか、自分にはタスク管理自体が不要なのではないかとも思い始めたのだ。それからは、特別に意識してタスク管理はしなくなった。プロジェクトの管理はしていたが、それも仕事の内容を忘れないためのメモ程度のものだった。それだけでも仕事は問題なく進めることはできた。\nところが、徐々にフラストレーションが溜まってきた。先程言った「仕事」とは受注案件のみを指していたのだ。受注案件は捌けているが、他に自分でやりたいこと（勉強とか自作アプリ開発とか）にほとんど手を付けていないことに気がついた。実質的に、フリーランスになる前と同じ状況となってしまった。当時と違うのは、他の時間が確保できないわけではないことだ。受注案件は締切は厳しくない（ことが多い）。他のことをする時間は十分にあるはずなのに、できなかった。ぼうっとするか、ゲームをするくらいだ。もちろんゲームもやりたいことに違いはないが、他のやりたいことができないのが辛かった。\nこのままではマズイと思い、受注案件も、勉強もゲームもバランスよくやっていこうと思い、またタスク管理を始めようと考えていたころに、丁度『「やること地獄」を終わらせるタスク管理「超」入門』に出会った。また失敗して飽きて、自己嫌悪に陥るという恐怖も少しはあったが、読んでみた。読了後、今度こそ本当に「私のタスク管理」ができる気がした。\nこの本に書かれているように、人間は完璧ではない。だから、失敗しないようにするのではなく、失敗することを前提にする。これだけで気が楽になる。失敗を前提にして、失敗したら徐々に修正していく。そのためにも、少しずつ変えていくことが大切だ。そして、冷静に自分の生活を見つめると、それほど複雑なタスク管理は必要ではないことがわかった。GTDのような多くのリストを使うシステムは自分には合わない。もっとシンプルな方法が良い。結局、ポモドーロ・テクニックをアレンジしたやり方に行き着いた（それは後日紹介するかも）。まだ一ヶ月程度しか経っていないが、悪くない。\nこれは「最強のタスク管理」ではない。まだ小さいが、今の自分にフィットした「私のタスク管理」である。\n","description":"","id":3,"section":"posts","tags":null,"title":"私のタスク管理","uri":"https://catalion.com/posts/my-task-management/"},{"content":"このサイトでも使っているVuePressのalpha版が出た。プラグインの仕組みが導入された。少し試そうと思ったが、まだ不安定っぽいので、もう少し安定してきたら試してみようと思う。ブログ機能も搭載されると思うので、利用すれば運用が楽になりそうである。自作プラグインも余裕があれば作ってみたい。\n最近なかなか更新できていない。正直ゲームのやりすぎが原因なのは間違いない。時間があればスプラトゥーンを起動している。このまま今年が終わってしまいそうな勢いなので、そろそろ時間配分に気をつけていきたい。\n","description":"","id":4,"section":"posts","tags":null,"title":"VuePressのalpha版が出た","uri":"https://catalion.com/posts/vuepress-alpha/"},{"content":"非常に面白かった。RPGにこれほど熱中したのは十数年ぶりだろう。それほど楽しかったのだ。1週目は全キャラーのストーリーを楽しんで、裏ボスまで攻略した。終わったあとも熱が冷めないまま2周目を始めた。2周目は仲間にするのは3人だけ（つまり4人）で、レベル上げや準備をあまりせずにどんどん進めていく遊び方にした。1周目で身につけた知識を使って攻略していくのが非常に楽しい。4人分のストーリークリアまで歯ごたえのある戦闘を維持できた（最後のほうが少し作業感があったかもしれない。レベルが上ってしまうからしょうがない）。1周目は70時間、2周目10時間ぐらい遊んだが、まだまだ楽しめると思う。体験版の時点でゲームとしての面白さは十分だったが、「ボリュームがなかったらどうしよう」という不安を少し感じていたが、なんの問題もなかった。\nただ、このゲームはボリュームは十分なのだが、面白すぎてもっと冒険をしたくなってしまう。アプデでボスの追加とか欲しい。\n","description":"","id":5,"section":"posts","tags":null,"title":"オクトパストラベラーを一通り遊んだが・・・","uri":"https://catalion.com/posts/octopath-traveler-finished/"},{"content":"自分にとっては久しぶりの新作RPG。体験版の段階で面白かったので迷わず購入。めちゃくちゃ面白い。\nドット絵と3D効果の合わせたグラフィック(HD-2Dと呼ばれるもの)が良い雰囲気を出していると思う。８人のキャラクターは全員仲間にできるが、全員分の育成が大変そうなので、とりあえず４人で進めている。今は４人それぞれの１章が終わり、一人が２章に入ったところである。このゲーム、なかなか歯ごたえがあって、４人目の１章のボスでかなり苦戦した。２章になると雑魚敵ですら強い（もはや雑魚ではない）。ゲームは簡単すぎても難しすぎてもつまらないが、これは自分には丁度よいバランスだと感じた。１章が終わるとどこかでバトルジョブが解禁されるらしいが、まだ取得できていない。２章を進めるのが辛いので、レベルとお金を貯めつつ、ジョブ探しでもしよう。まさか、２章のストーリーを進めないと解禁されない、、、なんてことはないと思いたい。\nこれだけ熱中できるRPGは久しぶりだ。今回は仲間にしていない４人のストーリーを楽しむために、少なくとももう１週は遊ぶと思われる。制限プレイをしても楽しめるかもしれない。スプラトゥーン2もアップデートで盛り上がっているが、こちらもかなり熱い。そして、今後もこういうRPGをどんどん出してほしい。\n","description":"","id":6,"section":"posts","tags":null,"title":"オクトパストラベラー","uri":"https://catalion.com/posts/octopath-traveler/"},{"content":"ここ数日間、何でも知りたい、勉強したいと思うようなった。新しい言葉に出会ったら調べ、さらに関連することも勉強している。以前はなんとなくスルーしていたのだが。なぜこうなったのかは分からない。\n何でも知りたがる傾向は悪くないと思うのでこのまま維持できたらいいが、この知識欲が急に無くなる可能性もある。だから今のうちにできるだけ勉強しておきたい。そのためにこの土日はゲームの時間を減らして読書の時間を増やす。とにかくできるだけ新しいことに触れる。ゲームでも新しいゲームを買うのもありだろう。これは自分の世界を広げるチャンスなので、最大限に活かしたい。\n知識欲とか、やる気とかは自分では完全には制御できない。それを制御する方法を探すのではなくて、それはある程度自然の流れに任せたほうがストレスはたまらない。やる気がないときはやらない方がいい場合も多い。やる気を出そうとするのではなく、やる気が出た時にすぐに動けるように準備する方が断然よい。\n","description":"","id":7,"section":"posts","tags":null,"title":"知識欲","uri":"https://catalion.com/posts/appetite-for-knowledge/"},{"content":"Nintendo Switchのマリオテニスエースが6月22日発売なのだが、6月1日から6月3日まで発売前先行オンライン大会が行われている。\nまず、自分はマリオテニスシリーズは触ったことがない。さらに、テニス自体も詳しくない。基本的なルールはわかるが、ロブやスライスなどの用語が分からなかった。そんな状態だが面白そうだったのでプレイしてみた。\n面白かった。\nまずは、チュートリアルで基本的な操作方法を教えてくれる。操作方法自体は難しくないが、ショットの打ち分けが難しい。ここでスライスを使う！という判断ができない。そして、そこに狙い打ちや加速、テクニカルショットという要素\u0008が混ざってくる。何回か練習して、ラリーを続けることはできるが、それはなんとなく打っているだけで、戦略的にショットを打ち分けている状態ではない。それでもラリーが続けば楽しい。打ったときの効果音が気持ち良い。\n基本操作はCOM戦で覚えた。一通り覚えたところで、対人戦に参加した。今のところ、勝率は6割ぐらいか。トーナメント方式だが、まだ優勝したことはない。相手によっては回線状況が悪く、動きがカクカクになったり、操作が受け付けないときがある。これはかなりストレスが貯まるので改善してほしい。ユーザー側の回線次第では厳しいかも？\n上手い人になかなか勝てないので、いろいろ模索していたが、以下のコツがあることがわかった。\n テクニカルショットは横は多様せずに後を積極的に使う（横はどうしても届かない時に） ショットの打ち分けでノックバックを軽減する  トップスピン（赤）にはスライス（B） スライス（青）にはトップスピン（A） フラット（紫）にはフラット（Y）    これでも、本当に上手い人には通用しない。加速がうまく使えていない感じ。もう少し考えてみる。\n","description":"","id":8,"section":"posts","tags":null,"title":"マリオテニス エースが面白い","uri":"https://catalion.com/posts/mario-tennis-ace/"},{"content":"現在Vue.jsの勉強中である。仕事でも使うし、また、このサイトがvuepressで作られているから、Vue.jsを使えば、コンポーネントを作ってサイトに埋め込むことができる。色々とお得なのだ。だが、得があるから勉強するわけではなく、最初に興味があったから勉強を始めた。きっかけは知的好奇心である。得するのはモチベーションの持続に役立つ。\nまあ、とにかくVue.jsの勉強中である。そのため、自分用にメモを残している。\nVue.js メモ\nこれはあくまでも自分用メモなので文章もあまり整えていない。内容が頻繁に変わるかもしれないし、ページを急に削除するかもしれない。それでも、誰かの役に立つかもしれないから公開した。\nメモすると、やはり頭に残るようだ。これはメモしたからというよりも、文書にする仮定で脳内で色々処理が走るからかもしれない。メモしなくても同じ脳内処理を再現すれば記憶に残るかもしれない。いずれにしても、数日放置すれば忘れてしまうだろう。そのためのメモだ。\n","description":"","id":9,"section":"posts","tags":null,"title":"Vue.js勉強中","uri":"https://catalion.com/posts/vuejs/"},{"content":"普段しないことを体験するでも言ったが、生活がパターン化している。毎日同じような情報にアクセスしている。意識しないと自分に馴染んだ情報しか得なくなる。それでは自分の世界観はどんどん狭くなる。\n世界を広げるためには、今の自分では辿り着けないような情報に触れることが必要だ。そのためには、何が必要なのだろうか。ということを最近考えている。\nネットの情報も検索結果の上位のものしか見ないし、Amazonでも同じだ。そもそも何か買う商品を探すときは自分の脳から出てきた言葉でしか検索しない。検索の段階で既に世界を狭めている。もっとランダム要素が必要だ。\nWikipediaにはランダムなページを開く機能がある。以下のURLにアクセスすればよい。\nhttp://ja.wikipedia.org/wiki/Special:Randompage\nこれを最低でも一日一回は開くようにする。そうすれば今の自分には辿り着けなかった情報に触れられる。このような機能があるWebサイトがあると便利だ。これ以外も色々探し中である。\n","description":"","id":10,"section":"posts","tags":null,"title":"ランダムな情報アクセス","uri":"https://catalion.com/posts/random/"},{"content":"2018/05/12 やりたいことが多すぎて頭が混乱している時、とりあえず脳から出てくる言葉を全て書いてみる。これをすると脳がスッキリする。混乱状態に陥っていた脳が回復し、次にする行動が浮かび上がってくる。この記事もそうやって書いているところである。だから今は混乱している。この後に何をするのかが分からない。\nやりたいことが多いというよりも、やるべき仕事があってそれから逃げているところかもしれない。仕事は土日は休むようにしているが、月曜のことを考えると気分が悪くなる。そうしていると気分が悪いまま時間が経過して月曜日が近づいてしまう。それは嫌だ。\nゲームをするか。スプラトゥーンをすれば熱中できる。負けが続いてストレスが貯まることもあるが、それは熱中している証拠だろう。ゲームをやれば、やっている間は他のことを考えない。それだけに集中している状態だ。これは確かに幸せである。しかし、終わった後が問題だ。ゲーム、特にスプラトゥーンは熱中しすぎて時間経過が早い。休日なんて3秒ぐらいかと思う程だ。\nゲームをやるにしても事前に時間を決めたほうが良い。ゲームだけやって休日が終わると、気分がより落ち込む。こんなことは毎日意識しているが、今日こそは守りたい。守れるだろうか。\nゲームじゃなくても同じことだけやって一日が過ぎるのが辛い。仕事だけの一日なんて最悪だ。ゲームだけも嫌だ。読書だけも駄目だ。色々やりたい。1つのことに集中したくない。15分刻みでやることを切り替えたらどうだろうか。スプラトゥーンを15分プレイ、小説を15分読む、ブログを15分書く。筋トレを15分、小説の続きが気になったのでまた15分読む・・・。こんな感じだと一日に多くの体験をできるはず。こういう過ごし方のほうがよいかもしれない。仕事だと緊急タスクが入ることがあるから、自分で制御できないこともあってうまく行かないこともある。しかし、休日ならできるはずだ。同じことを15分続けることを禁止にするのだ。\nこうして色々書いてきたが、少しは落ち着いてきたかもしれない。これから何をやるか。ゲームだ。もちろん15分である。\n","description":"","id":11,"section":"posts","tags":null,"title":"トムソンガゼルの手記 〜2018/05/12〜より","uri":"https://catalion.com/posts/free-writing/"},{"content":"以前にqiitaで投稿したライブラリを使わない素のJavaScriptでDOM操作。これはJavaScriptで行うDOM操作を簡潔にまとめたものである。それをもうすこし丁寧(？）に解説した記事を書いた。\nDOM操作入門\nDOM操作をするAPIを調べたいだけならQiitaに上げた記事の方が便利であるが、DOM操作自体の経験が無かったり、基本から学びたい人もいると思ったので書いてみた。最初は電子書籍にしようかと思ったが、書いていく内に本にするほどでもないと感じたので、このようにWeb上での記事にした。\nQiitaとの使い分け Qiitaと自サイトをどうやって使い分けるかを色々考えたが、Qiitaは1ページで完結するような量のコンテンツで、自サイトは複数ページにまたがる情報を投稿するという方針にしている。この方針は曖昧だし、途中で変わるかもしれない。とりあえずの指針として決めただけである。\nそもそも最近はあまりQiitaに投稿していない。他の仕事とかゲームに集中していたからだろう。今後は、1つのことに集中するのではなく色々なことをやっていきたい。\n","description":"","id":12,"section":"posts","tags":null,"title":"DOM操作入門を書いた","uri":"https://catalion.com/posts/dom/"},{"content":"一ヶ月ぐらい前にサイトを移行したときは静的サイトジェネレータとしてHugoを使ったが、数日前からカスタマイズする段階になって、自分には合わないことに気づいた。テーマを自作しようとしていたのだが、だんだん面倒になってきた。自作せずに既存のテーマを使えばいいのだが、自分に合うテーマを探すことも面倒だった。なぜこんなに面倒だと感じるのか。それは、ツール自体が自分に合っていないからだ。なぜ合っていないのかはまだ言語化できないが、とにかく他のツールへの移行を考えた。それで、昨日は別のツールを探していたのだが、そこで見つかったのがVuePressである。\nVuePressは文書中心のWebサイトへ特化している 自サイトは文書が中心になる（予定である）。VuePressは文書を中心としたWebサイトの構築に特化しているらしく、これこそが自分が求めていたものではないかと思った。実際にインストールして試してみると、自分にぴったりだった。これなら文書作成に集中できそうだ。\nVuePressはまだまだ発展途上らしく、今後はブログ機能なるものも追加されるらしい。追加されたら、この日記はそれで管理しよう。\n設定をいじればPWA化も簡単にできるらしいので、後日試してみよう。\n","description":"","id":13,"section":"posts","tags":null,"title":"VuePressを導入した","uri":"https://catalion.com/posts/vuepress/"},{"content":"自分の生活はパターン化している。多少の変化はあるけれど、だいたい同じような生活を続けている。同じことを体験していると刺激が少なくなる。そうなると、飽きてしまうし、同じような情報しか得られない。\nだから、全然違うことをしてみる。普段家に篭っているなら、外出してみたり、普段とは違う店に入ったり、いつもは読まないジャンルの本を読んでみたり・・・。こういう新鮮な体験をすると脳がリフレッシュされ、新たな発想が得られたりする。普段とは違うことすることで、世界が広がる。\n自分も、たまには外に出たほうが良さそうだ。\n","description":"","id":14,"section":"posts","tags":null,"title":"普段しないことを体験する","uri":"https://catalion.com/posts/irregular-experience/"},{"content":"最近、色々なところで能力不足を感じている。仕事のプログラミング関係や、趣味のゲームや将棋など、もっと上達したいと思う。好きなことだから別に今のままでもいいのだが、さらに上の段階に行けばもっと楽しめるのではないかとも思うのだ。\nだから最近は何をやるにしても、もっと上達するにはどうすれば良いかを考えながらやっている。その方が、ただ経験を積んでいくよりも上達が速いと思うからだ。\n成人発達理論による能力の成長 ダイナミックスキル理論の実践的活用法という本を参考にしたが、実践するときはできるだけ自分の言葉で言語化することを意識して取り組む。プログラミングなら文法の説明や実装方法について自分の言葉で説明できるようにする。ゲームなら勝てた理由、負けた理由を言語化する。\nこうして、プロジェクトがどんどん増えていくのだ。だからプロジェクト管理ツールを探してで言ったようにプロジェクトとそのタスクを一覧表示するためのツールを探していた。全てが１つの画面に表示されているという安心感は大きい。今のところ、その画面はアナログノートであるが。\n","description":"","id":15,"section":"posts","tags":null,"title":"上達への道","uri":"https://catalion.com/posts/skillup/"},{"content":"プロジェクト管理ツールを探している。プロジェクト管理といってもそんな大げさなモノではなく単純に今抱えているプロジェクトとそのタスクを一覧できればよい。ポイントは一覧できるということだ。プロジェクト毎にページが割り当てられているのではなくて、一覧できるのがよい。タスクの追加と編集、削除程度の機能があればよい。\nアナログノートで管理しても良いが、タスクの追加と削除が頻繁に発生すると面倒だ。そんなわけでツールを探しているのだが、コレというものが見つからない。これなら作ってしまったほうが早いかもしれない。\nやっぱりアナログで管理してもいいかもしれないな。よく考えてみると、それほどタスクの入れ替えは起こらないのではないか？\n結局アナログにすることにした。一週間ごとにプロジェクト毎のタスクを見開きページで管理すれば丁度良いのではないか。\nスプラトゥーン2をやりながら、こんなことを考えていると、すぐに一日が終わってしまう。\n","description":"","id":16,"section":"posts","tags":null,"title":"プロジェクト管理ツールを探して","uri":"https://catalion.com/posts/project-management-tool/"},{"content":"しばらくブログの更新とかサボっていたので、心機一転してサイトを立ち上げ直した。\n結局CMSとかで管理するよりも静的サイトジェネレータでやったほうが自分には合っているのではと思いHugoを使ってみた。時間があるときにテーマを自作してみたい。\n","description":"","id":17,"section":"posts","tags":null,"title":"サイト再開","uri":"https://catalion.com/posts/start-website/"},{"content":"Vue.jsを使えば、データを宣言的にDOM描画できる。宣言的とは、手続き的とは異なり、データをどうやって描画するのかという「手続き」を気にしない。その「手続き」はVue.jsの内部に隠蔽されている。使用者はデータの内容に集中することができる。\nテンプレート構文 1 2 3  \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;span v-bind:title=\u0026#34;msg\u0026#34;\u0026gt;{{ text }}\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt;   1 2 3 4 5 6 7  var app = new Vue({ el: \u0026#39;#app\u0026#39;, //htmlの要素を指定して紐付ける  data: { msg: \u0026#39;属性との紐付け\u0026#39; //テンプレートのv-bind:title=\u0026#34;msg\u0026#34;と紐づく  text: \u0026#39;テキストの紐付け\u0026#39; //テンプレートの{{ text }}と紐づく  } })   条件分岐  v-if v-else-if v-else v-show  1 2 3 4 5  \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;span v-if=\u0026#34;error === \u0026#39;A\u0026#39; \u0026#34;\u0026gt;エラーA\u0026lt;/span\u0026gt; \u0026lt;span v-else-if=\u0026#34;error === \u0026#39;B\u0026#39; \u0026#34;\u0026gt;エラーB\u0026lt;/span\u0026gt; \u0026lt;span v-else\u0026gt;OK!\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt;   1 2 3 4 5 6  var app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { error: \u0026#39;B\u0026#39; } })   Vue.jsが内部で要素の再利用をしている。そのため、v-ifとv-elseで要素が再利用される可能性がある。これにより、input要素などでは入力欄の値が保持される可能性がある。これを回避するためには、要素のkey属性を付与し、一意な値に設定する。\nv-showもv-ifと同じ記述。v-showはCSSでの切り替えをする。そのため非表示時も描画される。\n::: tip\n複数要素の表示を切り替えたい場合は、\u0026lt;template\u0026gt;を使用する。\n1 2 3 4  \u0026lt;template v-if=\u0026#34;error\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;エラー\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;エラー発生！！！！\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt;   ただし、v-showでは\u0026lt;template\u0026gt;は使えない\n:::\nループ 1 2 3 4 5  \u0026lt;ul id=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in items\u0026#34; v-bind:title=\u0026#34;item.title\u0026#34;\u0026gt; {{ index }} - {{ item.msg }} \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;   1 2 3 4 5 6 7 8 9  var list = new Vue({ el: \u0026#39;#list\u0026#39;, data: { items: [ { title: \u0026#39;オレンジ\u0026#39;, msg: \u0026#39;orange\u0026#39; }, { title: \u0026#39;ブルー\u0026#39;, msg: \u0026#39;blue\u0026#39; } ] } });   :::tip\nkey属性を指定して、DOM要素の状態の整合性を維持させることもできる。（内部でinput要素を使っているときなど）\n1  \u0026lt;li v-for=\u0026#34;item in items\u0026#34; v-bind:key=\u0026#34;item.id\u0026#34;\u0026gt;   :::\n:::warning\n配列の内容を変更時、HTMLにも反映させるにはVue.set()を通して変更する。[]で変更すると反映されない。\n1  Vue.set(list.items, index, newValue);   :::\nイベント 1 2 3 4  \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;button v-on:click=\u0026#34;hello\u0026#34;\u0026gt;Hello\u0026lt;/button\u0026gt; \u0026lt;p\u0026gt;{{msg}}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt;   1 2 3 4 5 6 7 8 9 10 11  var app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { msg: \u0026#39;\u0026#39; }, methods: { hello: function(event){ this.msg += \u0026#39;hello\u0026#39;; } } })   :::tip\nv-on:clickでメソッド呼び出しすれば、引数を渡すことができる。その際は$eventを明示的に渡すことでeventが使える。\n1  \u0026lt;button v-on:click=\u0026#34;hello(\u0026#39;catalion\u0026#39;, $event)\u0026#34;\u0026gt;\u0026lt;/button\u0026gt;   1 2 3  hello: function(name, event){ this.msg += \u0026#39;hello, \u0026#39; + name; }   :::\n修飾子が色々ある。\n1 2 3 4 5 6 7 8 9 10 11 12  \u0026lt;!-- preventDefault() --\u0026gt; \u0026lt;form v-on:submit.prevent=\u0026#34;onSubmit\u0026#34;\u0026gt;\u0026lt;/form\u0026gt; \u0026lt;!-- preventDefault()とstopPropagation() --\u0026gt; \u0026lt;a v-on:click.stop.prevent=\u0026#34;hello\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;!-- 一度だけ --\u0026gt; \u0026lt;a v-on:click.once=\u0026#34;hello\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;!-- Enter押下時のみ呼ぶ --\u0026gt; \u0026lt;input v-on:keyup.enter=\u0026#34;submit\u0026#34;\u0026gt;   フォーム入力 1 2 3 4  \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;input v-model=\u0026#34;msg\u0026#34;\u0026gt; \u0026lt;p\u0026gt;メッセージ: {{ msg }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt;   1 2 3 4 5 6  var app = new Vue({ el: \u0026#39;#app\u0026#39; data: { msg: \u0026#39;\u0026#39; } });   v-modelではIME変換中は反映されない。\n他のinput要素\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;single-check\u0026#34; v-model=\u0026#34;checked\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;single-check\u0026#34;\u0026gt;Check\u0026lt;/label\u0026gt; \u0026lt;p for=\u0026#34;single-check\u0026#34;\u0026gt;{{ checked }}\u0026lt;/p\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;checkA\u0026#34; value=\u0026#34;A\u0026#34; v-model=\u0026#34;checkedNames\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;checkA\u0026#34;\u0026gt;CheckA\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;checkB\u0026#34; value=\u0026#34;B\u0026#34; v-model=\u0026#34;checkedNames\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;checkB\u0026#34;\u0026gt;CheckB\u0026lt;/label\u0026gt; \u0026lt;p\u0026gt;Checked names: {{ checkedNames }}\u0026lt;/p\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id=\u0026#34;radioA\u0026#34; value=\u0026#34;A\u0026#34; v-model=\u0026#34;checkedRadio\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;radioA\u0026#34;\u0026gt;radioA\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id=\u0026#34;radioB\u0026#34; value=\u0026#34;B\u0026#34; v-model=\u0026#34;checkedRadio\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;two\u0026#34;\u0026gt;radioB\u0026lt;/label\u0026gt; \u0026lt;p\u0026gt;checkedRadio: {{ checkedRadio }}\u0026lt;/p\u0026gt; \u0026lt;select v-model=\u0026#34;selected\u0026#34;\u0026gt; \u0026lt;option disabled value=\u0026#34;\u0026#34;\u0026gt;選択してください\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;A\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;B\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;C\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;p\u0026gt;Selected: {{ selected }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt;   1 2 3 4 5 6 7 8 9  var app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { checked: false, checkedNames: [\u0026#39;B\u0026#39;], checkedRadio: \u0026#39;\u0026#39;, selected: \u0026#39;\u0026#39; } });   算出プロパティ 1 2 3 4  \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Name: \u0026#34;{{ name }}\u0026#34;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;greet: \u0026#34;{{ greet }}\u0026#34;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt;   1 2 3 4 5 6 7 8 9 10 11  var vm = new Vue({ el: \u0026#39;#app\u0026#39;, data: { name: \u0026#39;catalion\u0026#39; }, computed: { greet: function () { return \u0026#39;Hello, \u0026#39; + this.name; } } })   getterとして使える。普通にメソッドを定義して呼び出すこととの違いは、算出プロパティはキャッシュされること。\n上記の例の場合、name属性が変更されるまではgreetの結果はキャッシュされる。キャッシュされたくないならメソッドにする。\nコンポーネント Vueインスタンスを再利用可能な部品化したもの。独自のタグとして複数配置することができる。\n1 2 3 4  \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;greet name=\u0026#34;catalion\u0026#34;\u0026gt;\u0026lt;/greet\u0026gt; \u0026lt;greet name=\u0026#34;トムソンガゼル\u0026#34;\u0026gt;\u0026lt;/greet\u0026gt; \u0026lt;/div\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  Vue.component(\u0026#39;greet\u0026#39;, { //コンポーネントではdataは関数にする必要がある  data: function () { return { msg: \u0026#39;hello\u0026#39;, } }, //プロパティ。カスタム属性としてコンポーネントへデータを渡すことができる。  props: [\u0026#39;name\u0026#39;], template: \u0026#39;\u0026lt;p\u0026gt;{{ msg }}, {{ name }}\u0026lt;/p\u0026gt;\u0026#39; }); var app = new Vue({ el: \u0026#39;#app\u0026#39; });   コンポーネントから親へのデータ送信はイベントを使う。\n1 2 3 4 5 6 7 8  \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;task v-for=\u0026#34;task in tasks\u0026#34; v-bind:key=\u0026#34;task.id\u0026#34; v-bind:task=\u0026#34;task\u0026#34; v-on:delete-task=\u0026#34;deleted\u0026#34;\u0026gt; \u0026lt;!-- delete-taskイベントを受け取る --\u0026gt; \u0026lt;/task\u0026gt; \u0026lt;/div\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  Vue.component(\u0026#39;task\u0026#39;, { props: [\u0026#39;task\u0026#39;], template: ` \u0026lt;div\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; v-model=\u0026#34;task.done\u0026#34;\u0026gt; \u0026lt;span\u0026gt;{{ task.title }}\u0026lt;/span\u0026gt; \u0026lt;button v-on:click=\u0026#34;delete_task\u0026#34;\u0026gt;削除\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; `, methods: { delete_task: function(){ //delete-taskイベントを発火、引数も渡せる  this.$emit(\u0026#39;delete-task\u0026#39;, this.task); } }, }); var app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { tasks: [ { id: 1, title: \u0026#39;コンビニで牛乳を買う\u0026#39;, done: false }, { id: 2, title: \u0026#39;Vue.jsの勉強\u0026#39;, done: false }, { id: 3, title: \u0026#39;ブログ記事を書く\u0026#39;, done: false} ] }, methods: { deleted: function(task){ var index = this.tasks.findIndex(function(t){ return t.id === task.id; }); this.tasks.splice(index, 1); alert(\u0026#39;タスク「\u0026#39; + task.title + \u0026#39;」を削除しました。\u0026#39;); } } });   ","description":"","id":18,"section":"posts","tags":null,"title":"vuejsメモ","uri":"https://catalion.com/posts/vuejs-memo/"},{"content":"移行してみた。\n","description":"","id":19,"section":"posts","tags":null,"title":"テスト","uri":"https://catalion.com/posts/first-post/"},{"content":"当サイトでは、Googleによるアクセス解析ツールGoogleアナリティクスを利用しています。\nGoogleアナリティクスはトラフィックデータの収集のためにCookieを使用しています。このトラフィックデータは匿名で収集されており、個人を特定するものではありません。詳しくはGoogle アナリティクス利用規約をご覧ください。\n","description":"","id":20,"section":"posts","tags":null,"title":"","uri":"https://catalion.com/posts/privacy/"}]